<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 
	例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="com.ly.dao.StockDao">

	<!--resultMap注释 http://www.cnblogs.com/kenhome/p/7764398.html -->
	<!-- https://www.jianshu.com/p/041bec8ae6d3 -->

	<select id="getAll" resultType="Stocks">
		select * from stocks t
	</select>


	<select id="getListForDay" resultType="Stocks">
		select * from stocks t
		limit #{pageIndex},#{pageSize}
	</select>



	<select id="getTotalsForDay" resultType="int">
		select count(1) from
		stocks t

	</select>


	<select id="findSingleStockPinYin" resultType="Stocks">
		select * from stocks t
		<where>
			<if test="stock != null">pinyin LIKE concat(concat('%',#{stock}),'%')</if>
		</where>
	</select>


	<select id="findSingleStockByCode" resultType="Stocks">
		select * from stocks t
		<where>
			<if test="stock != null">code LIKE concat(concat('%',#{stock}),'%')</if>
		</where>
	</select>


	<select id="findSingleStockByCodeForBuy" resultType="Stocks">
		select * from stocks t
		<where>
			<if test="stock != null">code = #{stock.code}</if>
		</where>
	</select>



	<update id="updatePinyin">
		update stocks set pinyin =#{pinyin} where code
		=#{code}
	</update>



	<insert id="save">
		<selectKey keyProperty="count" resultType="int" order="BEFORE">
			select count(1) from stocks t where t.code = #{code}
		</selectKey>
		<if test="count > 0">
			update stocks
			<trim prefix="set" suffixOverrides=",">
				<if test="code != null">code = #{code, jdbcType=VARCHAR},</if>
				<if test="name != null">name = #{name,jdbcType=VARCHAR},</if>
			</trim>
			where code = #{code}
		</if>
		<if test="count == 0">
			insert into stocks
			(
			code,
			name
			)
			values(
			#{code,
			jdbcType=VARCHAR},
			#{name, jdbcType=VARCHAR})
		</if>
	</insert>


	<insert id="insertBatch">
		insert into stocks
		(
		code,
		name
		)
		values
		<foreach collection="list" item="stockBasic" separator=",">
			(#{stockBasic.code, jdbcType=VARCHAR}, #{stockBasic.name,
			jdbcType=VARCHAR})
		</foreach>
	</insert>


	<delete id="deleteByBatch" parameterType="Stocks"> <!-- java.lang.String -->
		delete from stocks
		where code IN
		<foreach collection="list" item="stockBasic" open="("
			separator="," close=")">
			#{stockBasic.code, jdbcType=VARCHAR}
		</foreach>
	</delete>

	<update id="truncateTable">
		truncate table stocks
	</update>

</mapper>